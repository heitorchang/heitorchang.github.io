New Project
installation, tutorial
28 oct 2019

As of 28 oct 2019, the latest versions are 2.2.6 for Django and 3.8.0 for Python.

Change to your desired directory. Commands below are for Windows. Use Git Bash in Windows.

```
> mkdir mydjangoproject
> cd mydjangoproject
> python -m venv venv
> source venv/Scripts/activate
> python -m pip install --upgrade pip  # optional
> pip install django
> django-admin.py startproject mydjangoproject .  # the dot at the end creates project in current directory
> python manage.py startapp myapp
```

To leave the virtualenv:
```
> deactivate
```
--
Saving the virtualenv packages
deployment
28 oct 2019

Inside the virtualenv, change to the top-level directory and run
```
> pip freeze > requirements.txt
```

To install them in the server, create a virtualenv there and run
```
> pip install -r requirements.txt
```
--
Hosting
deployment
28 oct 2019

Look for:

* ssh access
* PostgreSQL
* Python 3.7+
* Uptime guarantees
--
.gitignore
setup
28 oct 2019

```
# Emacs

*~
\#*
.\#*


# Python

__pycache__/


# Virtualenv

venv/


# Django

secrets.py
db.sqlite3


# touch these files so you can autocomplete the manage.py commands

runserver
makemigrations
migrate
```
--
Do not use null with string fields, except when unique and blank are True
models
28 oct 2019

[Django docs](https://docs.djangoproject.com/en/2.2/ref/models/fields/)

Avoid using null on string-based fields such as CharField and TextField.

The Django convention is to use the empty string, not NULL.

One exception is when a CharField has both unique=True and blank=True set. In this situation, null=True is required to avoid unique constraint violations when saving multiple objects with blank values.
--
PostgreSQL Setup
setup, databases
28 oct 2019

```
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql_psycopg2',
        'NAME': 'hellopost',
        'USER': 'hellopost',
        'PASSWORD': 'secretpass',
        'HOST': '127.0.0.1',
        'PORT': '',  # default port
    }
}
```
--
Initial data for models
models
28 oct 2019

[Django docs](https://docs.djangoproject.com/en/2.2/topics/migrations/#data-migrations)

`RunPython` is the main operation used for data migrations.

After creating the tables (making and running migrations), run

```
> python manage.py makemigrations --empty yourappname
```

Edit the newly created migration:

```
def create_default_genres(apps, schema_editor):
    Genre = apps.get_model('yourappname', 'Genre')
    fiction = Genre(name="Fiction")
    fiction.save()


class Migration(migrations.Migration):

    dependencies = [
        ('yourappname', '0001_initial'),
    ]

    operations = [
        migrations.RunPython(create_default_genres),
    ]
```
--
related_name
models
28 oct 2019

The default `related_name` is `manyobject_set`.

For example, in the official Polls tutorial, we can get all Choices for a Poll Question with `q.choice_set.all()`

When a model has two fields that refer to the same Foreign Key, `related_name` is mandatory.

For example, in double-entry accounting, a Transaction that is recorded in a debit account and credit account must have unique related_names. The `Transaction` class has:

* `debit = models.ForeignKey(Account, related_name='debit_set', on_delete=...)`
* `credit = models.ForeignKey(Account, related_name='credit_set', on_delete=...)`
--
Redirecting in `urls.py`
routing, setup
28 oct 2019

```
from django.views.generic.base import RedirectView

# ...

path('', RedirectView.as_view(url='/NEWURL/', permanent=False), name='pathname'),
```
