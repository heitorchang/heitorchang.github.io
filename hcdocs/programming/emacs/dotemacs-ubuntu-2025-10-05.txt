;; 10 Aug 2025
;; Ubuntu

;; window size and position
;; wide
;; (setq initial-frame-alist '((top . 80) (left . 920) (width . 120) (height . 42)))

;; large "left" value forces the window to line up with the right edge

;; for ProggyTinyTTSZ
(setq initial-frame-alist '((top . 185) (left . 1299) (width . 100) (height . 77)))

;; for Noto
;; (setq initial-frame-alist '((top . 158) (left . 1260) (width . 88) (height . 58)))

(setq gnutls-algorithm-priority "NORMAL:-VERS-TLS1.3")
;; quick-access function load a specific file

(defun quick-access-1 () (interactive) (find-file "/home/hcbel/code/hcdocs/markdown_input/programming/python/Fluent_Python_2_2025-09.md"))

;; (global-set-key (kbd "<M-f4>") 'save-buffers-kill-terminal)
(global-set-key (kbd "C-c f") 'fundamental-mode)
(global-set-key (kbd "C-c w") 'whitespace-mode)
(global-set-key (kbd "C-c C-l") 'find-file-literally)

(global-set-key (kbd "<f1>") 'quick-access-1)
(global-set-key (kbd "<f4>") 'delete-other-windows)

(global-set-key (kbd "<f2>") 'shell)

;; (global-set-key (kbd "<C-f2>") ; or C-f2
;;                 (lambda () (interactive) (progn (find-file-read-only "/home/hcbel/code/clojure-repl/project.clj")
;;                                                 (call-interactively 'cider-jack-in)))) ; works but leaves project.clj buffer open

(global-set-key (kbd "<f3>") 'isearch-forward)
(global-set-key (kbd "C-f") 'isearch-forward)
(define-key isearch-mode-map (kbd "<f3>") 'isearch-repeat-forward)
(global-set-key (kbd "<C-f3>") 'isearch-repeat-backward)
(global-set-key (kbd "M-f") 'isearch-repeat-backward)

;; Note: most Ctrl + f- combinations are unbound
(global-set-key (kbd "<f5>") 'run-python)
(global-set-key (kbd "<f6>") 'slime)
;; (global-set-key (kbd "<f6>") 'run-scheme)
;; (global-set-key (kbd "<f6>") 'cider-jack-in)
(global-set-key (kbd "<f7>") 'make-directory)
(global-set-key (kbd "<f8>") 'kill-this-buffer)
(global-set-key (kbd "<f9>") 'find-file-read-only)
(global-set-key (kbd "<C-f9>") 'find-file)
(global-set-key (kbd "<f10>") 'save-buffer)
(global-set-key (kbd "<f11>") 'write-file)
(global-set-key (kbd "<f12>") 'split-window-below)
(global-set-key (kbd "<C-f12>") 'split-window-right)


(setq default-directory "/home/hcbel/")
(prefer-coding-system 'utf-8-unix)
(setq coding-system-for-write 'utf-8-unix)

(setq inhibit-startup-message t)
(setq backup-inhibited t)
(setq auto-save-default nil)
(setq make-backup-files nil)
(setq create-lockfiles nil)
(setq ring-bell-function 'ignore)
(setq split-width-threshold nil)  ;; prevent vertical split
(set-language-environment "UTF-8")
(setq-default frame-title-format "%f")
(delete-selection-mode t)
(menu-bar-mode -1)

(put 'downcase-region 'disabled nil)

;; avoid slowness with very long lines
;; (global-so-long-mode 1)

(require 'package)
(let* ((no-ssl (and (memq system-type '(windows-nt ms-dos))
                    (not (gnutls-available-p))))
       (proto (if no-ssl "http" "https")))
  (when no-ssl
    (warn "\
Your version of Emacs does not support SSL connections,
which is unsafe because it allows man-in-the-middle attacks.
There are two things you can do about this warning:
1. Install an Emacs version that does support SSL and be safe.
2. Remove this warning from your init file so you won't see it again."))
  ;; Comment/uncomment these two lines to enable/disable MELPA and MELPA Stable as desired
  (add-to-list 'package-archives (cons "melpa" (concat proto "://melpa.org/packages/")) t)
  (add-to-list 'package-archives (cons "melpa-stable" (concat proto "://stable.melpa.org/packages/")) t)
  (when (< emacs-major-version 24)
    ;; For important compatibility libraries like cl-lib
    (add-to-list 'package-archives (cons "gnu" (concat proto "://elpa.gnu.org/packages/")))))

(package-initialize)

(defun trim-string (string)
  "Remove white spaces in beginning and ending of STRING.
White space here is any of: space, tab, emacs newline (line feed, ASCII 10)."
  (replace-regexp-in-string "\\`[ \t\n]*" "" (replace-regexp-in-string "[ \t\n]*\\'" "" string)))

;; Custom
(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(ansi-color-faces-vector
   [default default default italic underline success warning error])
 '(ansi-color-names-vector
   ["black" "red" "green" "yellow" "blue" "magenta" "cyan" "white"])
 '(c-basic-offset 4)
 '(c-default-style "linux")
 '(cider-lein-command "/home/hcbel/bin/lein")
 '(column-number-mode t)
 '(custom-enabled-themes '(my-tango))
 '(custom-safe-themes
   '("e705c379b87e67da2fd9f9fca9e0bf1b26314421c18b0e04515ed3ae5f2b8c25" "0dc6afd6c1f6b0f5a6c6429e4ac4344f4d9658316cf6d73c1f858321dbd03fe4" "fef2b72443b493d8b4b3e9363c3a7a89aec1b9a8ac296f0bfe2bf20ed21d3955" "b4b68ba76ae0d83018fd14556eeb72a0fe61cea1ae946433fabaeacb16134a2a" default))
 '(default-tab-width 2 t)
 '(fill-column 72)
 '(global-visual-line-mode nil)
 '(indent-tabs-mode nil)
 '(ispell-personal-dictionary (expand-file-name "~/.aspell"))
 '(iswitchb-mode t)
 '(js-indent-level 2)
 '(js2-strict-missing-semi-warning nil)
 '(package-selected-packages
   '(idle-highlight-mode svelte-mode rust-mode cider exec-path-from-shell kotlin-mode paredit smartparens scala-mode rjsx-mode ## vlf js2-mode slime use-package isend-mode web-mode vue-html-mode ssass-mode pyvenv mmm-mode edit-indirect auto-complete))
 '(py-closing-list-dedents-bos t)
 '(py-indent-list-style 'line-up-with-first-element)
 '(py-install-directory "C:/Users/Tok/Desktop/code/")
 '(py-separator-char "/")
 '(savehist-mode t)
 '(scroll-conservatively 100)
 '(scroll-preserve-screen-position t)
 '(scroll-step 1)
 '(sql-db2-login-params nil)
 '(tool-bar-mode nil)
 '(web-mode-auto-close-style 1)
 '(web-mode-auto-quote-style 1)
 '(web-mode-block-padding 0)
 '(web-mode-code-indent-offset 2)
 '(web-mode-css-indent-offset 2)
 '(web-mode-enable-auto-closing t)
 '(web-mode-enable-auto-opening nil)
 '(web-mode-enable-auto-pairing nil)
 '(web-mode-enable-auto-quoting nil)
 '(web-mode-markup-indent-offset 2)
 '(web-mode-script-padding 0)
 '(web-mode-style-padding 0)
 '(yas/prompt-functions
   '(yas/ido-prompt yas/x-prompt yas/completing-prompt yas/no-prompt)))


;; Font family, large: Noto Mono, height 90
;; Font family, small: ProggyTinyTTSZ, height 110
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(default ((t (:inherit nil :stipple nil :background "PapayaWhip" :foreground "black" :inverse-video nil :box nil :strike-through nil :overline nil :underline nil :slant normal :weight light :height 110 :width normal :foundry "outline" :family "ProggyTinyTTSZ"))))
 '(sldb-restartable-frame-line-face ((t (:foreground "dark green"))))
 '(idle-highlight ((t (:background "#bdf1de")))))

(use-package idle-highlight-mode
  :config (setq idle-highlight-idle-time 0.1)
  :hook ((python-mode scheme-mode) . idle-highlight-mode))

;; auto-complete-mode
(require 'auto-complete-config)

(setq-default ac-sources (add-to-list 'ac-sources 'ac-source-dictionary))
(setq ac-disable-faces nil)

(global-auto-complete-mode t)
(add-to-list 'ac-modes 'fundamental-mode)
(setq ac-ignore-case nil)
(define-key ac-completing-map "\r" nil)  ; remove completion with RET
(setq ac-auto-start 1)
;; prevent pop-up on arrow keys
(define-key ac-completing-map (kbd "<down>") nil)
(define-key ac-completing-map (kbd "<up>") nil)
(setq ac-delay 0.0001)
(setq ac-disable-faces nil)
(setq ac-auto-show-menu 0.0001)

;; globals
(defun my-indent-whole-buffer ()
  (interactive)
  (save-excursion
    (mark-whole-buffer)
    (call-interactively 'indent-region)))

(defun load-diary ()
  (interactive)
  (find-file "/home/personal/personal/diary.txt"))

;; C-<backspace> does not add to kill ring
(defun backward-delete-word (arg)
  (interactive "p")
  (delete-region (point) (progn (backward-word arg) (point))))

;; C-<delete> does not add to kill ring
(defun forward-delete-word (arg)
  (interactive "p")
  (delete-region (point) (progn (forward-word arg) (point))))

(defun my-newline-and-indent ()
  (interactive)
  (newline-and-indent))

(defun my-newline-and-indent-keep-whitespace ()
  (interactive "*")
  (newline nil t)
  (indent-according-to-mode))

(global-set-key (kbd "C-<backspace>") 'backward-delete-word)
(global-set-key (kbd "C-<delete>") 'forward-delete-word)

(global-set-key (kbd "M-<backspace>") 'backward-delete-word)
(global-set-key (kbd "M-<delete>") 'forward-delete-word)

(global-set-key (kbd "C-M-<backspace>") 'backward-kill-sexp)

(global-set-key (kbd "C-t") 'yank)
(global-set-key (kbd "M-t") 'yank-pop)
(global-set-key (kbd "M-k") 'jpk/delete-line)

;; (global-set-key (kbd "RET") 'newline-and-indent)
(global-set-key (kbd "RET") 'my-newline-and-indent-keep-whitespace)

(global-set-key (kbd "C-<") 'previous-buffer)
(global-set-key (kbd "C->") 'next-buffer)
(global-set-key (kbd "C-'") 'switch-to-buffer)

(global-set-key (kbd "C-c C-a") 'auto-complete-mode)

(global-set-key (kbd "<M-up>") 'previous-multiframe-window)
(global-set-key (kbd "<M-down>") 'next-multiframe-window)
(global-set-key (kbd "M-o") 'other-window)

(global-set-key (kbd "M-p") 'backward-paragraph)
(global-set-key (kbd "M-n") 'forward-paragraph)

(global-set-key (kbd "C-c C-e") 'electric-indent-mode)
(global-set-key (kbd "C-c i") 'indent-region)

(global-set-key (kbd "M-w") 'kill-ring-save)
(global-set-key (kbd "M-u") 'undo)
(global-set-key (kbd "C-z") 'undo)
(global-set-key (kbd "M-z") 'undo)

(global-set-key (kbd "C-x x") 'copy-line)
(global-set-key (kbd "C-/") 'sgml-close-tag)

;; cursor
(blink-cursor-mode 1)
(set-cursor-color "#337c10")

;; box cursor
;; (set-default 'cursor-type 'box)

;; bar cursor
(set-default 'cursor-type 'bar)

;; force regular font
(defun disable-bold ()
  (interactive)
  (mapc (lambda (face) (set-face-attribute face nil :weight 'light :underline nil)) (face-list)))
(call-interactively 'disable-bold)

(set-face-bold-p 'bold nil)

(defun remap-faces-default-attributes ()
  (let ((family (face-attribute 'default :family))
        (height (face-attribute 'default :height)))
    (mapcar (lambda (face)
              (face-remap-add-relative
               face :family family :weight 'normal :height height))
          (face-list))))

(when (display-graphic-p)
  (add-hook 'minibuffer-setup-hook 'remap-faces-default-attributes)
  (add-hook 'change-major-mode-after-body-hook 'remap-faces-default-attributes))

(electric-indent-mode -1)
(electric-pair-mode -1)

;; elpy
(setenv "PYTHONIOENCODING" "utf-8")
(add-to-list 'process-coding-system-alist '("elpy" . (utf-8 . utf-8)))
(add-to-list 'process-coding-system-alist '("python" . (utf-8 . utf-8)))

;; (elpy-enable)

;; (when (load "flycheck" t t)
;;   (setq elpy-modules (delq 'elpy-module-flymake elpy-modules)))

(add-hook 'elpy-mode-hook
          (lambda ()
            (flycheck-mode t)
            (highlight-indentation-mode -1)
            (setq flycheck-highlighting-style nil)
            ;; disable autocomplete dropdowns
            (setq company-idle-delay nil)
            (setq company-minimum-prefix-length 99)
            (define-key elpy-mode-map (kbd "<C-return>") 'my-python-send-buffer)
            (define-key elpy-mode-map (kbd "<C-up>") 'backward-paragraph)
            (define-key elpy-mode-map (kbd "<C-down>") 'forward-paragraph)
            (define-key elpy-mode-map (kbd "<M-up>") 'elpy-nav-backward-block)
            (define-key elpy-mode-map (kbd "<M-down>") 'elpy-nav-forward-block)))

;; custom functions
;; general
(defun line-emptyp ()
  (= (line-beginning-position) (line-end-position)))

(defun copy-line ()
  (interactive)
  (beginning-of-line)
  (kill-line)
  (yank))

(setq inferior-lisp-program "sbcl")

;; Python
;; Inferior Python and testing
;; (setq python-shell-interpreter "/usr/bin/python3")
(setq python-shell-interpreter "/home/hcbel/conda/bin/python3")

(setenv "PYTHONPATH" "/home/hcbel/learn-code/interview-topics/practice_2025-08")
(setenv "PYTHONSTARTUP" "/home/hcbel/code/hcdocs/src/programming/python/mystartup.py")
(setenv "PYTHONUNBUFFERED" "x")
;; (setenv "BETTER_EXCEPTIONS" "1")

;; .mysecrets contains:
;;
;; export TOKAPI_PREV_PONTUAL_API_TOKEN='myapitoken'
;; export TOKAPI_PREV_PONTUAL_BEL_PASSWORD='belpassword'
;; etc.

(setenv "TOKAPI_PREV_PONTUAL_BEL_USERNAME" "tempo-ok-pf")
(setenv "TOKAPI_PREV_PONTUAL_BEL_PASSWORD" (shell-command-to-string ". ~/.mysecrets; echo -n $TOKAPI_PREV_PONTUAL_BEL_PASSWORD"))
(setenv "BELGINGUR_API_USERNAME" (shell-command-to-string ". ~/.mysecrets; echo -n $BELGINGUR_API_USERNAME"))
(setenv "BELGINGUR_API_PASSWORD" (shell-command-to-string ". ~/.mysecrets; echo -n $BELGINGUR_API_PASSWORD"))
(setenv "ECCODES_DIR" "/home/personal")
(setenv "TOKENEL_DB_PASSWORD" (shell-command-to-string ". ~/.mysecrets; echo -n $TOKENEL_DB_PASSWORD"))

(setenv "LOCAL_DB_HOST" (shell-command-to-string ". ~/.mysecrets; echo -n $LOCAL_DB_HOST"))
(setenv "LOCAL_DB_PORT" (shell-command-to-string ". ~/.mysecrets; echo -n $LOCAL_DB_PORT"))
(setenv "LOCAL_DB_USER" (shell-command-to-string ". ~/.mysecrets; echo -n $LOCAL_DB_USER"))
(setenv "LOCAL_DB_PASS" (shell-command-to-string ". ~/.mysecrets; echo -n $LOCAL_DB_PASS"))
(setenv "LOCAL_DB_NAME" (shell-command-to-string ". ~/.mysecrets; echo -n $LOCAL_DB_NAME"))

;; suppress Python shell warning
(setq python-shell-completion-native-disabled-interpreters '("python"))

;; closing bracket after multi-line definition should line up with original
;; https://stackoverflow.com/questions/4293074/in-emacs-python-mode-customize-multi-line-statement-indentation

(defadvice python-calculate-indentation (around outdent-closing-brackets)
  "Handle lines beginning with a closing bracket and indent them so that
they line up with the line containing the corresponding opening bracket."
  (save-excursion
    (beginning-of-line)
    (let ((syntax (syntax-ppss)))
      (if (and (not (eq 'string (syntax-ppss-context syntax)))
               (python-continuation-line-p)
               (cadr syntax)
               (skip-syntax-forward "-")
               (looking-at "\\s)"))
          (progn
            (forward-char 1)
            (ignore-errors (backward-sexp))
            (setq ad-return-value (current-indentation)))
        ad-do-it))))
(ad-activate 'python-calculate-indentation)

(defun my-python-send-buffer ()
  (interactive)
  (save-excursion
    (python-shell-send-string (trim-string (buffer-string)))))

(defun my-python-print-and-send-buffer ()
  (interactive)
  (save-excursion
    (python-shell-send-string (concat "print('''" (trim-string (buffer-string)) "''')"))
    (python-shell-send-string (concat "print('')\n" (trim-string (buffer-string))))))

(defun my-python-send-statement ()
  (interactive)
  (python-shell-send-string (thing-at-point 'line))
  (python-shell-send-string "\n")
  (move-end-of-line nil))

(defun my-python-send-block ()
  (interactive)
  (set-mark (line-end-position))
  (let ((lines-of-block 0))
    (while (or (equal (line-beginning-position) 0) (not (line-emptyp)))
      (previous-line)
      (beginning-of-line)
      (set 'lines-of-block (+ 1 lines-of-block)))
    (beginning-of-line)
    (call-interactively 'python-shell-send-region)
    (python-shell-send-string "\n")
    (dotimes (i lines-of-block)
      (next-line))
    (end-of-line)))

(defun my-js-send-block ()
  (interactive)
  (set-mark (line-end-position))
  (let ((lines-of-block 0))
    (while (or (equal (line-beginning-position) 0) (not (line-emptyp)))
      (previous-line)
      (beginning-of-line)
      (set 'lines-of-block (+ 1 lines-of-block)))
    (beginning-of-line)
    (call-interactively 'js-send-region)
    (dotimes (i lines-of-block)
      (next-line))
    (end-of-line)))

(defun my-js-send-line ()
  (interactive)
  (set-mark (line-end-position))
  (beginning-of-line)
  (call-interactively 'js-send-region)
  (end-of-line))

;; isend-mode
(defun my-isend-send-sexp ()
  (interactive)
  (save-excursion
    (backward-sexp)
    (mark-sexp)
    (call-interactively 'isend-send)))

(defun my-isend-send-line ()
  (interactive)
  (set-mark (line-end-position))
  (beginning-of-line)
  (call-interactively 'isend-send)
  (end-of-line))

(defun my-isend-send-block ()
  (interactive)
  (set-mark (line-end-position))
  (let ((lines-of-block 0))
    (while (or (equal (line-beginning-position) 0) (not (line-emptyp)))
      (previous-line)
      (beginning-of-line)
      (set 'lines-of-block (+ 1 lines-of-block)))
    (beginning-of-line)
    (call-interactively 'isend-send)
    (end-of-line)))

;; Scheme
(setq scheme-program-name "/share/chicken/csi -:c")  ; Chicken
;; (setq scheme-program-name "mit-scheme")
(setenv "CHICKEN_INCLUDE_PATH" "/home/hcbel/code/hc-chicken-modules")

(defun my-scheme-send-buffer ()
  (interactive)
  (mark-whole-buffer)
  (call-interactively 'scheme-send-region)
  (end-of-buffer)
  (deactivate-mark))

(defun my-scheme-move-end-and-send ()
  (interactive)
  (call-interactively 'move-end-of-line)
  (call-interactively 'scheme-send-last-sexp))

;; newline without breaking current line
(defun my-newline-without-breaking ()
  (interactive)
  (let ((oldpos (point)))
    (end-of-line)
    (newline-and-indent)))

(add-hook 'isend-mode-hook
          (lambda ()
            (define-key isend-mode-map (kbd "<C-return>") 'isend-send-buffer)))  ;; override default

(add-hook 'f90-mode-hook
          (lambda ()
            (auto-complete-mode 1)
            (electric-indent-mode 1)))

(add-hook 'java-mode-hook
          (lambda ()
            (auto-complete-mode 1)
            (setq c-basic-offset 2)
            (indent-tabs-mode nil)
            (electric-indent-mode 1)))

(add-hook 'rust-mode-hook
          (lambda ()
            (auto-complete-mode 1)
            (electric-indent-mode 1)))

(add-hook 'emacs-lisp-mode-hook
          (lambda ()
            (local-set-key [C-return] (lambda () (interactive) (call-interactively 'eval-print-last-sexp) (insert "\n")))))

(add-hook 'lisp-mode-hook
          (lambda ()
            (auto-complete-mode 1)
            (electric-indent-mode 1)
            (enable-paredit-mode)
            (define-key paredit-mode-map (kbd "C-j") 'my-newline-and-indent)
            (define-key paredit-mode-map (kbd "<C-right>") 'forward-word)
            (define-key paredit-mode-map (kbd "<C-left>") 'backward-word)
            (define-key paredit-mode-map (kbd "<M-right>") 'forward-sexp)
            (define-key paredit-mode-map (kbd "<M-left>") 'backward-sexp)
            (define-key paredit-mode-map (kbd "<S-return>") 'slime-eval-defun)
            (define-key paredit-mode-map (kbd "<M-S-return>") 'my-next-line-and-eval)
            (define-key paredit-mode-map (kbd "<C-return>") 'slime-eval-buffer)))

(add-hook 'slime-repl-mode-hook
          (lambda ()
            (auto-complete-mode 1)
            (enable-paredit-mode)
            (define-key paredit-mode-map (kbd "C-j") 'my-newline-and-indent)
            (define-key paredit-mode-map (kbd "<C-right>") 'forward-word)
            (define-key paredit-mode-map (kbd "<C-left>") 'backward-word)
            (define-key paredit-mode-map (kbd "<M-right>") 'forward-sexp)
            (define-key paredit-mode-map (kbd "<M-left>") 'backward-sexp)
            (define-key paredit-mode-map (kbd "<S-return>") 'slime-eval-defun)
            (define-key paredit-mode-map (kbd "<M-return>") 'my-newline-and-indent)
            (define-key paredit-mode-map (kbd "<C-return>") 'slime-eval-buffer)
            (local-set-key (kbd "C-c C-q") 'slime-repl-quit)))

(add-hook 'scheme-mode-hook
          (lambda ()
            (auto-complete-mode 1)
            (electric-indent-mode 1)
            (enable-paredit-mode)
            (define-key paredit-mode-map (kbd "<C-right>") 'forward-word)
            (define-key paredit-mode-map (kbd "<C-left>") 'backward-word)
            (define-key paredit-mode-map (kbd "<M-right>") 'forward-sexp)
            (define-key paredit-mode-map (kbd "<M-left>") 'backward-sexp)
            (define-key paredit-mode-map (kbd "<S-return>") 'my-next-line)
            (define-key paredit-mode-map (kbd "<M-return>") 'scheme-send-last-sexp)
            (define-key paredit-mode-map (kbd "<C-return>") 'my-scheme-send-buffer)))

(add-hook 'inferior-scheme-mode-hook
          (lambda ()
            (auto-complete-mode 1)
            (electric-indent-mode 1)
            (enable-paredit-mode)
            (define-key paredit-mode-map (kbd "<C-right>") 'forward-word)
            (define-key paredit-mode-map (kbd "<C-left>") 'backward-word)
            (define-key paredit-mode-map (kbd "<M-right>") 'forward-sexp)
            (define-key paredit-mode-map (kbd "<M-left>") 'backward-sexp)
            (local-set-key (kbd "<return>") 'comint-send-input)
            (local-set-key (kbd "C-c C-q") 'my-exit-scheme)
            (define-key paredit-mode-map (kbd "<S-return>") 'my-inferior-scheme-newline)
            (define-key paredit-mode-map (kbd "<C-return>") 'my-scheme-send-buffer)))

(add-hook 'shell-mode-hook
          (lambda ()
            (auto-complete-mode 1)))

(add-hook 'python-mode-hook
          (lambda ()
            (set (make-local-variable 'electric-indent-mode) nil)
            (local-set-key (kbd "C-c C-c") 'keyboard-escape-quit)
            (local-set-key (kbd "C-c c") 'comment-region)
            (local-set-key (kbd "C-c u") 'uncomment-region)
            ;; (local-set-key (kbd "RET") 'newline-and-indent)
            (local-set-key (kbd "C-c l") (lambda () (interactive) (insert "# debug\nprint(")))
            ;; (local-set-key [S-return] 'my-python-send-statement)
            (local-set-key [M-return] (lambda () (interactive) (progn (call-interactively 'python-shell-send-region) (deactivate-mark))))
            (local-set-key [C-return] 'my-python-send-buffer)))

(defun my-indent-and-newline-and-indent ()
  (interactive)
  (indent-for-tab-command)
  (newline-and-indent))

(defun my-untabify-buffer ()
  (interactive)
    (save-excursion
      (mark-whole-buffer)
      (call-interactively 'untabify)
      (deactivate-mark)))

(add-hook 'web-mode-hook
          (lambda ()
            ;;; indent spaces
            (setq indent-tabs-mode nil)
            (local-set-key (kbd "C-c c") 'insert-code-tag)
            (local-set-key (kbd "RET") 'my-indent-and-newline-and-indent)))

(add-hook 'kotlin-mode-hook
          (lambda ()
            (auto-complete-mode 1)))

(add-hook 'before-save-hook 'delete-trailing-whitespace)
(add-hook 'before-save-hook 'my-untabify-buffer)

(add-hook 'rjsx-mode-hook
          (lambda ()
            (auto-complete-mode 1)))

(add-hook 'js-mode-hook
          (lambda ()
            (local-set-key (kbd "C-c c") 'js-send-buffer)
            (local-set-key [C-return] 'my-js-send-block)))

(add-hook 'html-mode-hook
          (lambda ()
            (auto-complete-mode 1)
            (sgml-mode)
            (js-jsx-mode)))

(add-to-list 'auto-mode-alist '("\\.tera\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.php\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.vue\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.html\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.js\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.jsx\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.svelte\\'" . web-mode))

;; text mode
(add-hook 'text-mode-hook
          (lambda ()
            (setq indent-tabs-mode nil)
            (auto-fill-mode -1)
            (auto-complete-mode 1)))

(define-key text-mode-map (kbd "TAB") 'self-insert-command)
(define-key text-mode-map [backtab] 'indent-for-tab-command)

(add-hook 'sql-mode-hook
          (lambda ()
            (auto-complete-mode 1)))

(add-hook 'inferior-python-mode-hook
          (lambda ()
            (auto-complete-mode 1)))

(put 'upcase-region 'disabled nil)

;; (setq default-input-method "portuguese-prefix")
(setq default-input-method "latin-1-prefix")
;; (setq default-input-method "japanese")

;; delete without adding to kill ring
(defmacro jpk/delete-instead-of-kill (&rest body)
  "Replaces `kill-region' with `delete-region' in BODY."
  `(cl-letf (((symbol-function 'kill-region)
              (lambda (beg end &optional yank-handler)
                (delete-region beg end))))
     ,@body))

(defun jpk/delete-line (arg)
  "Like `kill-line', but does not save to the `kill-ring'."
  (interactive "*p")
  (jpk/delete-instead-of-kill (kill-line arg)))

;; line-by-line block editing functions

(setq myval "")

(defun my-read ()
  (interactive)
  (setq myval (read-string (concat "Enter value to save in myval: "))))

(defun my-lines (transformation)
  (let ((lines (split-string (string-trim myval) "\n")))
    (insert (concat "\n" (string-join (mapcar transformation lines) "\n") "\n"))))

;; usage: (my-lines 'my-sql-value)
;;        (my-lines 'my-split-commas)
(defun my-sql-value (line)
  (concat "(" (replace-regexp-in-string "\"" "'" line) ")," ))

(defun my-split-commas (line)
  (insert (replace-regexp-in-string "," "\n" line) "\n"))

;; move to last sexp
(defun jump-to-last-sexp ()
  (interactive)
  (let ((pt (point))
        (fwpt (progn
                (thing-at-point--end-of-sexp) (point))))
    (while (not (eq pt fwpt))
      (setq pt fwpt fwpt (progn (thing-at-point--end-of-sexp) (point))))))

(global-set-key (kbd "M-e") 'jump-to-last-sexp)

;; beginning-of-sexp is unpredictable because when cursor is at (|value1 value2 value3)
;; calling beginning-of-sexp will move the cursor outside the sexp.
(defun jump-to-first-sexp ()
  (interactive)
  (let ((pt (point))
        (bkpt (progn
                (thing-at-point--beginning-of-sexp) (point))))
    (while (not (eq pt bkpt))
      (setq pt bkpt bkpt (progn (thing-at-point--beginning-of-sexp) (point))))))

(global-set-key (kbd "M-a") 'jump-to-first-sexp)

;; symbol highlighting

(defun unhighlight-all ()
  (interactive)
  (unhighlight-regexp t))

;; M-x hi-lock-mode if needed
(global-set-key (kbd "C-c d") 'highlight-symbol-at-point)
(global-set-key (kbd "C-c s") 'unhighlight-all)

(defun my-next-line ()
  (interactive)
  (end-of-line)
  (newline-and-indent))

(defun my-next-line-and-eval ()
  (interactive)
  (end-of-line)
  (newline-and-indent)
  (slime-eval-last-expression))

(defun my-next-line-and-cider-eval ()
  (interactive)
  (end-of-line)
  (newline-and-indent)
  (cider-eval-last-sexp))

(defun my-inferior-scheme-newline ()
  (interactive)
  (newline-and-indent))

(defun my-inferior-scheme-send-line ()
  (interactive)
  (end-of-line)
  (comint-send-input))

;; first, install the Google Font "Noto Serif JP"
(set-fontset-font "fontset-default" 'han (font-spec :name "Noto Serif JP" :size 18))
(set-fontset-font "fontset-default" 'kana (font-spec :name "Noto Serif JP" :size 18))

(defun insert-code-tag ()
  (interactive)
  (insert "<code>"))

;; rust-mode
(add-to-list 'load-path "/home/hcbel/.emacs.d/rust-mode-master/")
(autoload 'rust-mode "rust-mode" nil t)
(add-to-list 'auto-mode-alist '("\\.rs\\'" . rust-mode))

;; for writing <...> tags in HTML
(defun insert-angle-brackets ()
  (interactive)
  (insert "&lt;&gt;")
  (left-char)
  (left-char)
  (left-char)
  (left-char))

;; for writing <...> tags in HTML
(defun insert-code-tag ()
  (interactive)
  (insert "<code>"))

(defun my-exit-scheme ()
  (interactive)
  (insert "(exit)")
  (comint-send-input)
  (sleep-for 0.2)
  (kill-this-buffer))

(global-set-key (kbd "M-l") 'insert-angle-brackets)
(global-set-key (kbd "M-c") 'insert-code-tag)
