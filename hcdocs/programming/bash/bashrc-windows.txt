# My .bashrc

# If not running interactively, don't do anything
case $- in
    *i*) ;;
      *) return;;
esac

# Authentication tokens
source ~/.mybashsecrets.sh

# don't put duplicate lines or lines starting with space in the history.
# See bash(1) for more options
HISTCONTROL=ignoreboth

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=10000
HISTFILESIZE=20000

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "${debian_chroot:-}" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm-color|*-256color) color_prompt=yes;;
esac

if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
    # We have color support; assume it's compliant with Ecma-48
    # (ISO/IEC-6429). (Lack of such support is extremely rare, and such
    # a case would tend to support setf rather than setaf.)
    color_prompt=yes
    else
    color_prompt=
    fi
fi

# Short PS1: directory only in green
# PS1='\[\033[01;32m\]\w\[\033[0m\] $ '

if [ "$color_prompt" = yes ]; then
    PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '
else
    PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
fi
unset color_prompt force_color_prompt

# If this is an xterm set the title to user@host:dir
case "$TERM" in
xterm*|rxvt*)
    PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
    ;;
*)
    ;;
esac

# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'
    #alias dir='dir --color=auto'
    #alias vdir='vdir --color=auto'

    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi

# some more ls aliases
alias ll='ls -alF'
alias la='ls -A'
alias l='ls -CF'

alias py='python'
alias pymain='python main.py'

# Add an "alert" alias for long running commands.  Use like so:
#   sleep 10; alert
alias alert='notify-send --urgency=low -i "$([ $? = 0 ] && echo terminal || echo error)" "$(history|tail -n1|sed -e '\''s/^\s*[0-9]\+\s*//;s/[;&|]\s*alert$//'\'')"'

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
  fi
fi

export PROMPT_COMMAND='__git_ps1 "\[\033[34m\][`basename no_env$VIRTUAL_ENV`]\[\033[00m\] \[\033[01;34m\]\w\[\033[00m\]" " $ "'

export PATH="C:/Users/oktara/bin:$PATH"

alias rm='rm -i'
alias mv='mv -i'
alias cp='cp -i'

alias nwemacs='emacs -nw -bg black -fg white'

# Git
source ~/.bash/git-prompt.sh
alias gitwho='git log --all --format="%an %ar %s" | head -10'
alias githist='git log --pretty=format:"%h%x09%<(17)%ah%s"'
alias gittree='git log --graph --pretty=oneline --abbrev-commit'
alias gitbr='git branch -a'
alias gitfile='git log --name-only'
alias gitgraph='git log --all --decorate --oneline --graph'

# YYYY-MM-DD format
# alias githist='git log --pretty=format:"%h%x09%as%x09%s"'

export GIT_PS1_SHOWCOLORHINTS=true

# allows C-s to forward-search after using C-r to search history
# WARNING: HAS CRASHED LAPTOP'S UBUNTU 23, USE WITH CAUTION
stty -ixon

# using color has a bug: nothing is shown for matches in DOS-encoded files (CRLF end-of-line)
padgrep() {
    grep -Iinor --color=never --exclude-dir=".git" --exclude-dir="env2" --exclude-dir="var" --exclude-dir="dist" --exclude-dir="node_modules" ".\{0,26\}$1.\{0,26\}" *
}

searchdebug() {
    grep -Iinor --color=never --exclude-dir=".git" --exclude-dir="env2" --exclude-dir="node_modules" "//\sdebug\|#\sdebug" *
}

searchtodo() {
    grep -Iinor --color=never --exclude-dir=".git" --exclude-dir="env2" --exclude-dir="venv2" --exclude-dir="node_modules" "//todo\|#todo" *
}

myfind() {
    find . -name "$1"
}

# intercept git commands
# if copying partially, remember to add the 'else command git "$@"' branch
# intercept git commands to a log file
git() {
    # if [ "$1" == "commit" ] ; then
    #     echo Git commit intercepted, adding to /home/hcbel/gitcommitlog.txt
    #     MSG="$(date +""%d.%b_%H:%M"") $PWD: $3"
    #     sed -i '1i '"$MSG"' ' /home/hcbel/gitcommitlog.txt
    #     command git "$@"
    # elif
    if [ "$2" == "-A" ] ; then
        echo Should not add all, run /usr/bin/git to override.
        return 1
    elif [ "$2" == "-a" ] ; then
        echo Should not add all, run /usr/bin/git to override.
        return 1
    elif [ "$1" == "add" ] ; then
        branch_name="$(git symbolic-ref --short HEAD 2>/dev/null)"
        if [ "$branch_name" == "main" ] ; then
            echo Branch main detected. Doing nothing, run /usr/bin/git to override.
            return 1
        elif [ "$branch_name" == "master" ] ; then
            echo Branch master detected. Doing nothing, run /usr/bin/git to override.
            return 1
        else
            echo Did you run git status, diff, and are adding a single file? Did you edit Tests? [y for yes]
            read confirm_status

            if [ "$confirm_status" = "y" ]; then
                echo "Added. 'git commit' 'when applied, this commit will:' ~72 chars, START WITH ISSUE: #1000, see 'On branch'"
                command git "$@"
            else
                echo Aborting.
                return 1
            fi
        fi
    else
        command git "$@"
    fi
}

prg() {
    if [ "$1" == "commit" ] ; then
        echo Git commit intercepted, adding to /home/heitor/gitcommitlog.txt
        MSG="$(date +""%d.%b_%H:%M"") $PWD: $3"
        sed -i '1i '"$MSG"' ' /home/heitor/gitcommitlog.txt
        command git "$@"
    else
        command prg "$@"
    fi
}

alias eno='emacs -nw --color=no'

alias idea='/home/heitor/tools/intellij/bin/idea.sh &'
alias pycharm='/home/heitor/tools/pycharm/bin/pycharm.sh &'

alias removetmp='rm C:/Users/oktara/tmp/* -f -r'

export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion

export PAGER='less +g -S'

# hide tensorflow onednn warnings
export TF_CPP_MIN_LOG_LEVEL=3

alias python='winpty python'

# see python/mycommits
alias mycom='mycommits | more'
