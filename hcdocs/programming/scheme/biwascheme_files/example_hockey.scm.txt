;; http://lambda.bugyo.tk/cdr/hockey/
(define (strapp . args)
  (apply
   string-append
   (map (lambda (arg)
          (cond ((number? arg) (number->string arg))
                (else arg)))
        args)))

(define (message! . args)
  (alert (apply strapp args)))

(define (set-position-by-style! elm x y)
  (js-invoke elm "setAttribute" "style"
   (strapp "position:absolute;left:" x "px;top:" y "px;")))

(define (set-image-size! img width height)
  (js-invoke img "setAttribute" "width" width)
  (js-invoke img "setAttribute" "height" height))

(define (set-image-position! img x y)
  (set-position-by-style! img x y))

(define (hide-image! img)
  (js-invoke img "setAttribute" "style" "visibility:hidden"))

(define (put-image src . options)
  (define num-options (length options))
  (define (have-point?) (>= num-options 2))
  (define (have-size?) (>= num-options 4))
  (define (get-opt key)
    (cond ((eq? key 'x) (list-ref options 0))
          ((eq? key 'y) (list-ref options 1))
          ((eq? key 'width) (list-ref options 2))
          ((eq? key 'height) (list-ref options 3))
          (else #f)))
  (let ((img (js-eval "document.createElement('img')")))
    (js-invoke img "setAttribute" "src" src)
    (if (have-point?)
      (set-image-position! img (get-opt 'x) (get-opt 'y)))
    (if (have-size?)
      (set-image-size! img (get-opt 'width) (get-opt 'height)))
    (element-append-child! ($ "screen") img)
    img))

(define (set-button-label! button label)
  (js-invoke button "setAttribute" "value" label))

(define (set-button-procedure! button proc)
    (add-handler! button "click" proc))

(define (put-button label proc . options)
  (define num-options (length options))
  (define (have-point?) (>= num-options 2))
  (define (get-opt key)
    (cond ((eq? key 'x) (list-ref options 0))
          ((eq? key 'y) (list-ref options 1))
          (else #f)))
  (let ((button (js-eval "document.createElement('input')")))
    (js-invoke button "setAttribute" "type" "button")
    (js-invoke button "setAttribute" "value" label)
    (set-button-procedure! button proc)
    (if (have-point?)
      (set-position-by-style! button (get-opt 'x) (get-opt 'y)))
    (element-append-child! ($ "screen") button)
    button))

;;;;;
(define screen-width 640)
(define screen-height 480)


(define game-state 'demo)
(define frame-timer 0)
(define player-score 0)
(define enemy-score 0)

(define bar-width 60)
(define bar-height 10)
(define bar-speed 4)
(define player-y-base 460)
(define player-x (- 320 (div bar-width 2)))
(define player-y player-y-base)
(define player-y-pushed 440)
(define player-state 'normal)
(define enemy-y-base 10)
(define enemy-x (- 320 (div bar-width 2)))
(define enemy-y enemy-y-base)
(define enemy-y-pushed 30)
(define enemy-state 'normal)

(define ball-width 10)
(define ball-height 10)
(define ball-x (- 320 (div ball-width 2)))
(define ball-y (- 240 (div ball-height 2)))
(define ball-vy-base 2)
(define ball-vx 0)
(define ball-vy ball-vy-base)

(define left-wall 140)
(define right-wall 500)

(put-image "./img/b.png" left-wall 0 (- right-wall left-wall) screen-height)
(define player-bar
  (put-image "./img/bar.png" player-x player-y bar-width bar-height))
(define enemy-bar
  (put-image "./img/bar.png" enemy-x enemy-y bar-width bar-height))
(define ball
  (put-image "./img/ball.png" ball-x ball-y ball-width ball-height))
(put-image "./img/w.png" 0 0 left-wall screen-height)
(put-image "./img/w.png"
           right-wall 0 (- screen-width right-wall) screen-height)
(define goal-img
  (put-image "./img/goal.png" 170 165))
(hide-image! goal-img)
(define win-img
  (put-image "./img/win.png" 170 165))
(hide-image! win-img)
(define lose-img
  (put-image "./img/lose.png" 170 165))
(hide-image! lose-img)
(define enter-img
  (put-image "./img/enter.png" 0 0))
(define usage-img
  (put-image "./img/usage.png" 0 0))
(hide-image! usage-img)

(define (init-ball dir)
  (set! ball-x 320)
  (set! ball-y 240)
  (set! ball-vx (- 6 (random-integer 13)))
  (set! ball-vy (* ball-vy-base dir)))

(define (init-game)
  (set! player-x (- 320 (div bar-width 2)))
  (set! player-y player-y-base)
  (set! player-state 'normal)
  (set! enemy-x (- 320 (div bar-width 2)))
  (set! enemy-y enemy-y-base)
  (set! enemy-state 'normal)
  (set! player-score 0)
  (set! enemy-score 0)
  (init-ball 1))

(define (sign x)
  (/ x (abs x)))

(define (flatten-speed rate)
  (let ((base-speed (* ball-vy-base (sign ball-vy))))
    (+ ball-vy (/ (- ball-vy base-speed) rate))))

(define (check-hit bar-x bar-state new-ball-y)
  (if (and (< bar-x (+ ball-x ball-width))
           (< ball-x (+ bar-x bar-width)))
      (begin
        (set! ball-vx
              (+ ball-vx (/ (- (+ ball-x (/ ball-width 2))
                               (+ bar-x (/ bar-width 2)))
                            7)))
         (set! ball-y new-ball-y)
         (set! ball-vy (- ball-vy))
         (cond ((eq? bar-state 'push)
                (set! ball-vy (/ (* ball-vy 5) 4)))
               ((eq? bar-state 'pull)
                (flatten-speed 2))
               (else
                (flatten-speed 3))))))

(define (move-ball)
  (set! ball-x (+ ball-x ball-vx))
  (set! ball-y (+ ball-y ball-vy))
  (cond ((< ball-x left-wall)
         (set! ball-x left-wall)
         (set! ball-vx (- ball-vx)))
        ((> (+ ball-x ball-width) right-wall)
         (set! ball-x (- right-wall ball-width))
         (set! ball-vx (- ball-vx)))
        ((and (> ball-vy 0) (> (+ ball-y ball-height) player-y))
         (check-hit player-x player-state (- player-y ball-height 1)))
        ((and (< ball-vy 0) (< ball-y (+ enemy-y bar-height)))
         (check-hit enemy-x enemy-state (+ enemy-y ball-height 1)))
        (else '()))  ;; This line is needed. Bug of biwa-scheme?
  (set-image-position! ball ball-x ball-y))

(define (bar-next y state base pushed dir)
  (let ((op (if (> dir 0) < >)))
    (cond ((and (eq? state 'push) (op y pushed))
           (cons (+ y (* bar-speed dir)) state))
          ((and (eq? state 'push) (not (op y pushed)))
           (cons pushed 'pull))
          ((and (eq? state 'pull) (not (op y base)))
           (cons (- y (* bar-speed dir)) state))
          ((and (eq? state 'pull) (op y base))
           (cons base 'normal))
          (else (cons y state)))))

(define (move-bars)
  (if (eq? game-state 'demo)
      (let ((ps (auto-move player-x player-y player-state)))
        (set! player-x (list-ref ps 0))
        (set! player-y (list-ref ps 1))
        (set! player-state (list-ref ps 2))))
  (let ((es (auto-move enemy-x enemy-y enemy-state)))
    (set! enemy-x (list-ref es 0))
    (set! enemy-y (list-ref es 1))
    (set! enemy-state (list-ref es 2)))
  (let ((p (bar-next player-y player-state player-y-base player-y-pushed -1))
        (e (bar-next enemy-y enemy-state enemy-y-base enemy-y-pushed 1)))
    (set! player-y (car p))
    (set! player-state (cdr p))
    (set! enemy-y (car e))
    (set! enemy-state (cdr e))
    (if (> player-x right-wall)
        (set! player-x right-wall))
    (if (< (+ player-x bar-width) left-wall)
        (set! player-x (- left-wall bar-width)))
    (set-image-position! player-bar player-x player-y)
    (set-image-position! enemy-bar enemy-x enemy-y)))

(define key-enter 13)
(define key-esc 27)
(define key-left 37)
(define key-up 38)
(define key-right 39)
(define key-a 65)
(define key-s 83)
(define key-d 68)

(define key-left-p #f)
(define key-right-p #f)
(define key-up-p #f)

(define (key-process)
  (cond (key-left-p
         (set! player-x (- player-x bar-speed)))
        (key-right-p
         (set! player-x (+ player-x bar-speed)))
        (key-up-p
         (if (eq? player-state 'normal) (set! player-state 'push)))
        (else '())))

(define (keydown ev)
  (let ((code (js-ref ev "keyCode")))
    (cond ((or (= code key-left) (= code key-a))
           (set! key-left-p #t))
          ((or (= code key-right) (= code key-d))
           (set! key-right-p #t))
          ((or (= code key-up) (= code key-s))
           (set! key-up-p #t))
          ((and (= code key-enter) (eq? game-state 'demo))
                (start))
          ((= code key-esc)
           (reset-game))
          (else '()))))

(define (keyup ev)
  (let ((code (js-ref ev "keyCode")))
    (cond ((or (= code key-left) (= code key-a))
           (set! key-left-p #f))
          ((or (= code key-right) (= code key-d))
           (set! key-right-p #f))
          ((or (= code key-up) (= code key-s))
           (set! key-up-p #f))
          (else '()))))

(add-handler! (js-eval "document.body") "keydown" keydown)
(add-handler! (js-eval "document.body") "keyup" keyup)

(define (auto-move x y state)
  (let ((dist (abs (- ball-y y)))
        (exp-x (calc-x x y))
        (aim-x (+ x (aim-offset ball-vx)))
        (aimed-p #f))
    (cond ((> (- aim-x ball-width) exp-x)
           (set! x (- x bar-speed)))
          ((< (+ aim-x ball-width) exp-x)
           (set! x (+ x bar-speed)))
          (else (set! aimed-p #t)))
    (if (and (< dist (abs (- player-y-base player-y-pushed))) aimed-p)
        (list x y 'push)
        (list x y state))))

(define (aim-offset bvx)
  (if (= bvx 0)
      45
      30))

(define (calc-x x y)
  (let* ((width (- right-wall left-wall))
         (move-time (abs (round (/ (calc-h y) ball-vy))))
         (move-width (+ (- ball-x left-wall) (* ball-vx move-time)))
         (x-turn #f))
    (if (< move-width 0)
        (set! move-width (- (* 2 width) (mod (abs move-width) width))))
    (set! x-turn (mod (div move-width width) 2))
    (if (= x-turn 0)
        (+ (mod move-width width) left-wall)
        (- right-wall (mod move-width width)))))

(define (calc-h y)
  (let ((height (abs (- y ball-y))))
    (cond ((and (< y 240) (> ball-vy 0))
           (+ height (* (- screen-height ball-y) 2)))
          ((and (> y 240) (< ball-vy 0))
           (+ height (* ball-y 2)))
          (else height))))

(define (reset-game)
  (set! game-state 'demo)
  (hide-image! usage-img)
  (hide-image! goal-img)
  (hide-image! win-img)
  (hide-image! lose-img)
  (set-image-position! enter-img 0 0)
  (set-content! ($ "player-score") "")
  (set-content! ($ "enemy-score") "")
  (init-game))

(define (resume-game)
  (hide-image! goal-img)
  (hide-image! win-img)
  (hide-image! lose-img)
  (set! game-state 'playing)
  (if (or (> player-score 10) (> enemy-score 10))
      (reset-game))
  (init-ball (sign ball-vy)))

(define (goal who)
  (set! game-state 'goal)
  (if (eq? who 'player)
      (set! player-score (+ player-score 1))
      (set! enemy-score (+ enemy-score 1)))
  (set-content! ($ "player-score") (number->string player-score))
  (set-content! ($ "enemy-score") (number->string enemy-score))
  (set! frame-timer 90)
  (cond ((> player-score 10)
         (set-image-position! win-img 170 165))
        ((> enemy-score 10)
         (set-image-position! lose-img 170 165))
        (else
         (set-image-position! goal-img 170 165)))
  (hide-image! ball))

(define (check-goal)
  (if (eq? game-state 'goal)
      (if (> frame-timer 0)
          (set! frame-timer (- frame-timer 1))
          (resume-game))
      (cond ((< (+ ball-y ball-height) 0)
             (if (eq? game-state 'demo)
                 (init-ball (sign ball-vy))
                 (goal 'player)))
            ((> ball-y screen-height)
             (if (eq? game-state 'demo)
                 (init-ball (sign ball-vy))
                 (goal 'enemy)))
            (else '()))))

;;;;;

(define (start)
  (hide-image! enter-img)
  (set-image-position! usage-img 0 0)
  (init-game)
  (set-content! ($ "player-score") "0")
  (set-content! ($ "enemy-score") "0")
  (set! game-state 'playing))

(define (run)
  (if (not (eq? game-state 'demo))
      (key-process))
  (move-bars)
  (if (not (eq? game-state 'goal))
      (move-ball))
  (check-goal)
  (timer run 0.0166))

(run)
